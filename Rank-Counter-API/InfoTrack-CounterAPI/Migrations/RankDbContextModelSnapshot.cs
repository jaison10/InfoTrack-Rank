// <auto-generated />
using System;
using InfoTrack_CounterAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfoTrack_CounterAPI.Migrations
{
    [DbContext(typeof(RankDbContext))]
    partial class RankDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InfoTrack_CounterAPI.Models.Domain.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Positions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SearchEngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SearchString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SearchEngineId");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("InfoTrack_CounterAPI.Models.Domain.SearchEngine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlExtractionSyntax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SearchEngine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d733e4a0-cb6c-4f84-bbc9-904a1e29bacc"),
                            EngineName = "Bing",
                            Url = "https://www.bing.com/search?count=",
                            UrlExtractionSyntax = "<cite>(.*?)</cite>"
                        },
                        new
                        {
                            Id = new Guid("b95c7104-48fe-49a6-9273-b5c5c98ce2f7"),
                            EngineName = "Google",
                            Url = "https://www.google.co.uk/search?num=",
                            UrlExtractionSyntax = "href\\s*=\\s*(?:[\"'](?<1>[^\"']*)[\"']|(?<1>\\S+))"
                        });
                });

            modelBuilder.Entity("InfoTrack_CounterAPI.Models.Domain.Rank", b =>
                {
                    b.HasOne("InfoTrack_CounterAPI.Models.Domain.SearchEngine", "SearchEngine")
                        .WithMany()
                        .HasForeignKey("SearchEngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchEngine");
                });
#pragma warning restore 612, 618
        }
    }
}
